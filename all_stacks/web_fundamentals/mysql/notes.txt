Overview:
    1. Database Relationships
        - one to one
        - one to many
        - many to many
    2.  3 forms of normalization
    3.  Mysql Workbench
    4.  RDBMS
    5.  Data Types.
    6.  Indexing


1.
 


Examples of One-to-One

The easiest way to check to see if your relationship makes sense for your data is to simply talk through the relationship out loud. Remember that relationships go in two directions. For example, one address has only one ZIP code, but one ZIP code can have many addresses, thus making it a different type of relationship. Check out some of the sample One-to-One relationships below:

    Customers and Credit Cards - Every Customer has one Credit Card, every Credit Card belongs to one Customer.
    User and Email - Every User has one Email Address, every Email Address has one User.
    Product and Image - Every Product has an Image, every Image is of a Product.


One to Many and Many to One Relationships
Objectives:

    What is a one-to-many relationship?
    What are some examples of one-to-many relationships?
    What is the difference between a foreign key and a primary key ?
    In a one-to-many relationship, which table contains the foreign key?

Examples of one-to-many

One-to-Many is probably the most common relationship you'll encounter while making web applications. Often times a One-to-One relationship is actually much more similar to a One-to-Many. Below are a few examples:

    Messages and Comments - One Comment belongs to one Message, but one Message can have many Comments.
    States and Cities - One City is only in one State, but one State can have many Cities.
    Customers and Orders - One Order only has one Customer, but one Customer can have many Orders.


Examples of many-to many

Many-to-Many is often the most confusing type of relationship for lots of people, but if you make sure to talk-out the relationship out loud, you'll quickly find if it works or not. Remember, anytime you have a Many-to-Many, it will require some sort of joining table! Check out the below examples and use how we describe the relationship as a guide:

    Users and Interests - One User can have many Interests, one Interest can be applied to many Users.
    Actors and Movies - One Movie can have many Actors, one Actor can be in many Movies.
    Businesses and Cities - One Business can be spread across many Cities, one City can be home to many Businesses.




2.


Normalization
Objectives:

    What is database normalization, and what is its ultimate goal?
    How can database normalization be taken too far?
    What are the three forms of database normalization?



    Database normalization is simply a convention for splitting large tables of data into smaller separate tables with the primary goal being to not repeat data.


     First Form

        Each Column in your table can only have 1 value.

        Ex. You should not have an address column in your table that lists the address, city, state, and zip, all separated by commas.

    Second Form

        Each Column in your table that is not a key (primary or foreign) must have unique values.

        Ex. If you have a movies table with a categories column, you should not have a category repeated more than once.
    
    Third Form

        You cannot have a non-key column that is dependent on another non-key column.

        Ex. If you have a books table with columns publisher_name and publisher_address, the publisher_address and publisher_name should be separated into a separate table and linked to books with a foreign key. The publisher_address is dependent on the publisher_name and neither column is a key column.

3. Mysql Workbench:

    -Pretty simple to create a visual diagram of the db relationships in the tables using the GUI.


    Conventions:

        Objectives:

    Familiarity with database conventions

        We will be following a set of conventions to create our database. We don't have to follow these conventions, but we recommend our students to follow them for the following reasons:

            Developers can have a better understanding of your database if you are using a set of industry standards.
            Developers can create software to automate a lot of the queries if some assumptions can be made. In later chapters, you will learn about Object Relational Mappers (ORM), which are programs that other developers use to make database queries easier by providing some handy functions. These functions will only work if we have followed conventions that ORM author expects, which are primarily based on set industry standards.

        Guidelines

        Down the line, you may find yourself working with a company that has set up their database conventions a little bit differently, but these are the guidelines that we feel are best for this course:

            1. make the table name plural and ALL lowercase - make it plural (ex. users, leads, sites, clients, chapters, courses, modules)
            2. use "id" as the primary key - name it id (also make it auto-incremented).
            3. name foreign keys with singular_table_name_id when referencing to a primary key in another 4. table name it [singular name of the table you're referring to]_id (ex. user_id, lead_id, site_id, client_id, chapter_id, course_id, module_id).
            4.use created_at and updated_at as columns for the timestamp in EVERY table you create.

        When we do things in ORM or in Ruby on Rails, it becomes extremely important that we follow these naming conventions.




DATA TYPES IN SQL:

    Objectives:

    Familiarity with the different types of data that can be stored in MySQL and when to use each

    The following are the data types that you will be using 95% of the time. Although there are quite a few other data types that you can use, focus on these for now.

    Simple Data Types:

        VARCHAR(number of characters)
            Used to store non-numeric values that can be up to 255 characters. It is called a VARCHAR because it can store a variable number of characters and will only use the space required for each record that is stored in the database. VARCHAR should be used for values with different character lengths like an email, first_name, or last_name.
        CHAR(number of characters)
            Also used to store non-numeric values, however, it will use up all space for the set number of characters regardless of what value is added. For instance, if I set CHAR(15), and I try to store the value "Coding", it will use up the equivalent of 15 characters even though "Coding" is only 6 characters long. Char is good to use for things that will always be a given number of characters. Char would work well for something like a state_abbreviation.
        INT
            Used to store integers.
            The columns that you will find mostly using the INT are things like a unique identifier for each table. The majority of rows in a table will not exceed 2.1 billion records. INT is good to use for most normal number values like a phone_number or a zip_code.
            unsigned (positive numbers only) - can store numerical values from 0 up to 4294967295
            signed (positive and negative numbers) - can store numerical values from -2147483648 up to 2147483647


        BIGINT
            BIGINT would be used for columns that would need to store huge numbers. In most cases, you wouldn't need BIGINT, but if you wanted to store something like a Facebook id when using Facebook's API, since they have over a billion users the id will need to be a data type of BIGINT.
            unsigned (again positive numbers only) - can store numerical values from 0 up to 18446744073709551615
            signed (positive and negative numbers) - can store numerical values from 9223372036854775807 to -9223372036854775808.


        TINYINT
            TINYINT would be good to use for numbers that will be relatively small. A good example of something that would use a TINYINT is user level identifier (0 - inactive user, 1 - active user, 9 - admin).
            unsigned - can store numerical values from 0 up to 255
            signed - can store numerical values from -128 up to 127
        FLOAT
            Used to store floating point numbers (numbers that need to have decimal places). An example column for this would be like an item_cost.
        TEXT
            Used to store a large amount of text, like a description, message, or comment. Use this for any text that VARCHAR() is too small to handle.
        DATETIME
            used to store a date and time in the format YYYY-MM-DD hh:mm:ss




    

    

    






