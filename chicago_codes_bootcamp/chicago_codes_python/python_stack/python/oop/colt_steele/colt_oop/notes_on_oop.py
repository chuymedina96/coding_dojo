# OBJECTIVES 

# Define what object oriented programming is
# Understand encapsulation and abstration
# Create classes and instances and attach methods and properties to each

#What is OOP? (what does it even mean?)
    # not unique to python, most programming langauges out there are object oriented languages

    #WHAT DOES IT MEAN?
        # using code to represent or recreate things that exist in the world - things that are not in our programmng language
            #EXAMPLES:
                #1. CAR
                #2. USER
                #3. POKER HAND
                #3. DECK OF CARDS
                #4. A CASINO
                #5. 

                    # NOT LIMITED TO PHYSICAL OBJECTS
                        # A PROCESS, OR SONG, A SCHEDULE, CALENDER, ALL SORTS
                        # BUT THEY DONT EXIST YET IN PYTHON
                        # SO WE HAVE TO CREATE IT!
        
    # WHAT IS OOP?
        # OBJECT ORIENTED PROGRAMMING IS A METHOD OF PROGRAMMING THAT ATTEMPTS TO MODEL SOME PROCESS OR THINGS IN THE WORLD AS A CLASS OR OBJECT.

        # CLASS - A BLUEPRINT FOR OBJECTS. CLASS CAN CONTAIN METHODS (FUNCTIONS) AND ATRRIBUTES (SIMLIAR TO KEYS IN A DICT))
            # THEY DEFINE WHAT EVERY SINGLE INSTANCE OF THAT CLASS SHOULD CONTAIN.
            # EXAMPLE:
                # MODELING A USER - DEFINE A USER CLASS - DEFINE WHAT EVERY USER HAS - LIKE EVERYONE HAS A USERNAME OR PROFILE PCITURE
                # BUT WE ALSO INCLUDE METHODS OR FUNCTIONALITY LIKE EVERYONE HAS A LOG OUT AND SIGN IN METHOD OR CHANGE PROFILE METHOD
                # ABOUT TAKING FUNCTIONALITY AND PIECES OF DATA AND PUTTING THEM INTO A SPECIFICATION
                # LIKE EVERY USER HAS THIS OR EVERY PLAYING CARD HAS A SUIT AND A NUMBER 
                # COOKIE CUTTER - TO CREATE THE INDIVIDUAL INSTANCES OF THAT CLASS.    
        # INSTANCE - OBJECTS THAT ARE CONSTRUCTED FROM A CLASS BLUEPRINT THAT CONTAIN THEIR CLASS'S METHOD AND PROPERTIES
        # AN INSTANCE OF THE CLASS
        # USER OBJECT BASEED OFF OF USER CLASS

        # CLASSES AND OBJECTS
            # CLASSES ARE SCHEMATICS
            # OBJECTS ARE THE INSTANCES OF THAT CLASS CREATED USING THE RECIPE






# WHY OOP?
    # INTRODUCE ENCAPLULATION AND ABSTRACTION
    # DOESN'T ALLOW US TO DO ANYTHING WE COULDNT DO WITHOUT IT.
    # CAPABLE OF DOING THE SAME THING
    # JUST HOW WE STRUCTURE THINGS AND ORGANIZE THINGS

    # EXAMPLE:
        #ANIMALS: HUNDERED OR MILLIONS OF SPECIES:
            # WE HUMANS ORGANIZE THEM, CLASSIFIES THEM INTO SMALLER GROUPS
    # WITH OOP, WE CAN DO THE EXACT SAME THING

    # WITH OBJECT ORIENTED PROGRAMMING, THE GOAL IS TO ENCAPSULATE YOUR CODE INTO LOGICAL, HIERARCHICAL GROUPINGS USING CLASSES SO THAT YOU CAN REASON ABOUT YOUR CODE AT AHIGHER LEVEL.

    #EXAMPLE:
        # SAY WE WANT TO MODEL A GAME OF POKER IN OUR PROGRAM
        # WE WANT TO ORGANIZE THINGS INTO CLASSES
        # WE COULD HAVE THE FOLLOWING ENTITIES:
            #1. GAME
            #2. PLAYER
            #3. CARD
            #4. DECK
            #5. HAND
            #6. CHIP
            #7. BET
        # AVOID SPAGHETTI CODE
    

    # ENCAPSULATION
        # THE GROUPING OF PUBLIC AND PRIVATE ATTRIBUTES AND METHODS INTO PROGRAMMATIC CLASS, MAKING ABSTRACTION POSSIBLE
    
    # ABSTRACTION
        # EXPOSING ONLY THE 'RELEVANT' DATA IN A CLASS INTERFACE, HIDING PRIVATE ATTRIBUTES AND METHODS (AKA THE 'INNER WORKINGS') FROM USERS
            # WE TAKE AWAY THE INNER WORKING AND PROVIDE A INTERFACE INTO THAT
            # DRIVING ANY CAR, YOU HAVE A STEERING WHEEL. DONT NEED TO KNOW ABOUT THE INNTER WORKINGS ABOUT HOW IT WORKS OR ANYTHING ELSE HIDING BEHIND THE SCENE.
            # YOU JUST TURN THE WHEEL.
    













